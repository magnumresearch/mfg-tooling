package com.fangzhou.mfgtooling.web.rest;

import com.fangzhou.mfgtooling.MfgtoolingApp;
import com.fangzhou.mfgtooling.domain.Vulnerability;
import com.fangzhou.mfgtooling.repository.VulnerabilityRepository;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import static org.hamcrest.Matchers.hasItem;
import org.mockito.MockitoAnnotations;
import org.springframework.boot.test.IntegrationTest;
import org.springframework.boot.test.SpringApplicationConfiguration;
import org.springframework.http.MediaType;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.data.web.PageableHandlerMethodArgumentResolver;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.util.ReflectionTestUtils;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import com.fangzhou.mfgtooling.domain.enumeration.Connectivity;

/**
 * Test class for the VulnerabilityResource REST controller.
 *
 * @see VulnerabilityResource
 */
@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = MfgtoolingApp.class)
@WebAppConfiguration
@IntegrationTest
public class VulnerabilityResourceIntTest {

    private static final String DEFAULT_NAME = "AAAAA";
    private static final String UPDATED_NAME = "BBBBB";
    private static final String DEFAULT_TARGET_OS = "AAAAA";
    private static final String UPDATED_TARGET_OS = "BBBBB";
    private static final String DEFAULT_TARGET_SOFTWARE = "AAAAA";
    private static final String UPDATED_TARGET_SOFTWARE = "BBBBB";

    private static final Connectivity DEFAULT_NETWORK = Connectivity.LOCAL;
    private static final Connectivity UPDATED_NETWORK = Connectivity.LAN;

    @Inject
    private VulnerabilityRepository vulnerabilityRepository;

    @Inject
    private MappingJackson2HttpMessageConverter jacksonMessageConverter;

    @Inject
    private PageableHandlerMethodArgumentResolver pageableArgumentResolver;

    private MockMvc restVulnerabilityMockMvc;

    private Vulnerability vulnerability;

    @PostConstruct
    public void setup() {
        MockitoAnnotations.initMocks(this);
        VulnerabilityResource vulnerabilityResource = new VulnerabilityResource();
        ReflectionTestUtils.setField(vulnerabilityResource, "vulnerabilityRepository", vulnerabilityRepository);
        this.restVulnerabilityMockMvc = MockMvcBuilders.standaloneSetup(vulnerabilityResource)
            .setCustomArgumentResolvers(pageableArgumentResolver)
            .setMessageConverters(jacksonMessageConverter).build();
    }

    @Before
    public void initTest() {
        vulnerability = new Vulnerability();
        vulnerability.setName(DEFAULT_NAME);
        vulnerability.setTargetOs(DEFAULT_TARGET_OS);
        vulnerability.setTargetSoftware(DEFAULT_TARGET_SOFTWARE);
        vulnerability.setNetwork(DEFAULT_NETWORK);
    }

    @Test
    @Transactional
    public void createVulnerability() throws Exception {
        int databaseSizeBeforeCreate = vulnerabilityRepository.findAll().size();

        // Create the Vulnerability

        restVulnerabilityMockMvc.perform(post("/api/vulnerabilities")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(vulnerability)))
                .andExpect(status().isCreated());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll();
        assertThat(vulnerabilities).hasSize(databaseSizeBeforeCreate + 1);
        Vulnerability testVulnerability = vulnerabilities.get(vulnerabilities.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(DEFAULT_NAME);
        assertThat(testVulnerability.getTargetOs()).isEqualTo(DEFAULT_TARGET_OS);
        assertThat(testVulnerability.getTargetSoftware()).isEqualTo(DEFAULT_TARGET_SOFTWARE);
        assertThat(testVulnerability.getNetwork()).isEqualTo(DEFAULT_NETWORK);
    }

    @Test
    @Transactional
    public void getAllVulnerabilities() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get all the vulnerabilities
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities?sort=id,desc"))
                .andExpect(status().isOk())
                .andExpect(content().contentType(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.[*].id").value(hasItem(vulnerability.getId().intValue())))
                .andExpect(jsonPath("$.[*].name").value(hasItem(DEFAULT_NAME.toString())))
                .andExpect(jsonPath("$.[*].targetOs").value(hasItem(DEFAULT_TARGET_OS.toString())))
                .andExpect(jsonPath("$.[*].targetSoftware").value(hasItem(DEFAULT_TARGET_SOFTWARE.toString())))
                .andExpect(jsonPath("$.[*].network").value(hasItem(DEFAULT_NETWORK.toString())));
    }

    @Test
    @Transactional
    public void getVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);

        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities/{id}", vulnerability.getId()))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.id").value(vulnerability.getId().intValue()))
            .andExpect(jsonPath("$.name").value(DEFAULT_NAME.toString()))
            .andExpect(jsonPath("$.targetOs").value(DEFAULT_TARGET_OS.toString()))
            .andExpect(jsonPath("$.targetSoftware").value(DEFAULT_TARGET_SOFTWARE.toString()))
            .andExpect(jsonPath("$.network").value(DEFAULT_NETWORK.toString()));
    }

    @Test
    @Transactional
    public void getNonExistingVulnerability() throws Exception {
        // Get the vulnerability
        restVulnerabilityMockMvc.perform(get("/api/vulnerabilities/{id}", Long.MAX_VALUE))
                .andExpect(status().isNotFound());
    }

    @Test
    @Transactional
    public void updateVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);
        int databaseSizeBeforeUpdate = vulnerabilityRepository.findAll().size();

        // Update the vulnerability
        Vulnerability updatedVulnerability = new Vulnerability();
        updatedVulnerability.setId(vulnerability.getId());
        updatedVulnerability.setName(UPDATED_NAME);
        updatedVulnerability.setTargetOs(UPDATED_TARGET_OS);
        updatedVulnerability.setTargetSoftware(UPDATED_TARGET_SOFTWARE);
        updatedVulnerability.setNetwork(UPDATED_NETWORK);

        restVulnerabilityMockMvc.perform(put("/api/vulnerabilities")
                .contentType(TestUtil.APPLICATION_JSON_UTF8)
                .content(TestUtil.convertObjectToJsonBytes(updatedVulnerability)))
                .andExpect(status().isOk());

        // Validate the Vulnerability in the database
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll();
        assertThat(vulnerabilities).hasSize(databaseSizeBeforeUpdate);
        Vulnerability testVulnerability = vulnerabilities.get(vulnerabilities.size() - 1);
        assertThat(testVulnerability.getName()).isEqualTo(UPDATED_NAME);
        assertThat(testVulnerability.getTargetOs()).isEqualTo(UPDATED_TARGET_OS);
        assertThat(testVulnerability.getTargetSoftware()).isEqualTo(UPDATED_TARGET_SOFTWARE);
        assertThat(testVulnerability.getNetwork()).isEqualTo(UPDATED_NETWORK);
    }

    @Test
    @Transactional
    public void deleteVulnerability() throws Exception {
        // Initialize the database
        vulnerabilityRepository.saveAndFlush(vulnerability);
        int databaseSizeBeforeDelete = vulnerabilityRepository.findAll().size();

        // Get the vulnerability
        restVulnerabilityMockMvc.perform(delete("/api/vulnerabilities/{id}", vulnerability.getId())
                .accept(TestUtil.APPLICATION_JSON_UTF8))
                .andExpect(status().isOk());

        // Validate the database is empty
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll();
        assertThat(vulnerabilities).hasSize(databaseSizeBeforeDelete - 1);
    }
}
