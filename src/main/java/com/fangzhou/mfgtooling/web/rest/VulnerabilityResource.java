package com.fangzhou.mfgtooling.web.rest;

import com.codahale.metrics.annotation.Timed;
import com.fangzhou.mfgtooling.domain.Vulnerability;
import com.fangzhou.mfgtooling.repository.VulnerabilityRepository;
import com.fangzhou.mfgtooling.web.rest.util.HeaderUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.inject.Inject;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Optional;

/**
 * REST controller for managing Vulnerability.
 */
@RestController
@RequestMapping("/api")
public class VulnerabilityResource {

    private final Logger log = LoggerFactory.getLogger(VulnerabilityResource.class);
        
    @Inject
    private VulnerabilityRepository vulnerabilityRepository;
    
    /**
     * POST  /vulnerabilities : Create a new vulnerability.
     *
     * @param vulnerability the vulnerability to create
     * @return the ResponseEntity with status 201 (Created) and with body the new vulnerability, or with status 400 (Bad Request) if the vulnerability has already an ID
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @RequestMapping(value = "/vulnerabilities",
        method = RequestMethod.POST,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> createVulnerability(@RequestBody Vulnerability vulnerability) throws URISyntaxException {
        log.debug("REST request to save Vulnerability : {}", vulnerability);
        if (vulnerability.getId() != null) {
            return ResponseEntity.badRequest().headers(HeaderUtil.createFailureAlert("vulnerability", "idexists", "A new vulnerability cannot already have an ID")).body(null);
        }
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        return ResponseEntity.created(new URI("/api/vulnerabilities/" + result.getId()))
            .headers(HeaderUtil.createEntityCreationAlert("vulnerability", result.getId().toString()))
            .body(result);
    }

    /**
     * PUT  /vulnerabilities : Updates an existing vulnerability.
     *
     * @param vulnerability the vulnerability to update
     * @return the ResponseEntity with status 200 (OK) and with body the updated vulnerability,
     * or with status 400 (Bad Request) if the vulnerability is not valid,
     * or with status 500 (Internal Server Error) if the vulnerability couldnt be updated
     * @throws URISyntaxException if the Location URI syntax is incorrect
     */
    @RequestMapping(value = "/vulnerabilities",
        method = RequestMethod.PUT,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> updateVulnerability(@RequestBody Vulnerability vulnerability) throws URISyntaxException {
        log.debug("REST request to update Vulnerability : {}", vulnerability);
        if (vulnerability.getId() == null) {
            return createVulnerability(vulnerability);
        }
        Vulnerability result = vulnerabilityRepository.save(vulnerability);
        return ResponseEntity.ok()
            .headers(HeaderUtil.createEntityUpdateAlert("vulnerability", vulnerability.getId().toString()))
            .body(result);
    }

    /**
     * GET  /vulnerabilities : get all the vulnerabilities.
     *
     * @return the ResponseEntity with status 200 (OK) and the list of vulnerabilities in body
     */
    @RequestMapping(value = "/vulnerabilities",
        method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public List<Vulnerability> getAllVulnerabilities() {
        log.debug("REST request to get all Vulnerabilities");
        List<Vulnerability> vulnerabilities = vulnerabilityRepository.findAll();
        return vulnerabilities;
    }

    /**
     * GET  /vulnerabilities/:id : get the "id" vulnerability.
     *
     * @param id the id of the vulnerability to retrieve
     * @return the ResponseEntity with status 200 (OK) and with body the vulnerability, or with status 404 (Not Found)
     */
    @RequestMapping(value = "/vulnerabilities/{id}",
        method = RequestMethod.GET,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Vulnerability> getVulnerability(@PathVariable Long id) {
        log.debug("REST request to get Vulnerability : {}", id);
        Vulnerability vulnerability = vulnerabilityRepository.findOne(id);
        return Optional.ofNullable(vulnerability)
            .map(result -> new ResponseEntity<>(
                result,
                HttpStatus.OK))
            .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }

    /**
     * DELETE  /vulnerabilities/:id : delete the "id" vulnerability.
     *
     * @param id the id of the vulnerability to delete
     * @return the ResponseEntity with status 200 (OK)
     */
    @RequestMapping(value = "/vulnerabilities/{id}",
        method = RequestMethod.DELETE,
        produces = MediaType.APPLICATION_JSON_VALUE)
    @Timed
    public ResponseEntity<Void> deleteVulnerability(@PathVariable Long id) {
        log.debug("REST request to delete Vulnerability : {}", id);
        vulnerabilityRepository.delete(id);
        return ResponseEntity.ok().headers(HeaderUtil.createEntityDeletionAlert("vulnerability", id.toString())).build();
    }

}
